@page
@using WebTesting.Entities;
@using WebTesting.Entities.Enums;
@model WebTesting.Pages.Download.SelectModel
@inject IHttpContextAccessor Accessor
@{

}

@if (Accessor.HttpContext.Session.GetString("UserName") == null)
{
        <div class="text-center">
            <p>You are not logged in.</p>
        </div>
}
else
{   
    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <h2>Select posts to download.</h2>
            </div>
            <div class="col" style="border:1px solid red">
                <!--HERE ARE PRESETS-->
                Presets:
                <select asp>
                    <option>Preset 1</option>
                    <option>Preset 2</option>
                </select>
                <button>New</button>
                <button>Delete</button>
            </div>
            <div class="col-3 text-end">
                <input form="selectedPosts" type="submit" class="btn btn-primary" asp-page="/Download/Structure" value="Next step">
            </div>
        </div>
        <div class="row">
            <div class="col-2" style="border:1px solid red">
                    <!--HERE ARE Select settings-->
                    <form method="post" asp-page-handler="Select">
                    <label for="showDownloaded">Show downloaded posts:</label>
                    @if (Model.ShowDownloaded == true)
                    {
                        <input name="showDownloaded" type="checkbox" checked>
                    }
                    else
                    {
                        <input name="showDownloaded" type="checkbox">
                    }
                    <label for="nsfw">Nsfw/sfw:</label>
                    <select name="nsfw">
                        @switch (Model.Nsfw)
                        {
                            case SelectNsfw.SFW:
                                    <option value="both">Both</option>
                                    <option selected value="sfw">SFW</option>
                                    <option value="nsfw">NSFW</option>
                                break;
                            case SelectNsfw.NSFW:
                                    <option value="both">Both</option>
                                    <option value="sfw">SFW</option>
                                    <option selected value="nsfw">NSFW</option>
                                break;
                            default:
                                    <option selected value="both">Both</option>
                                    <option value="sfw">SFW</option>
                                    <option value="nsfw">NSFW</option>
                                break;
                        }
                        </select>
                    <label for="mediaTypes">Media to ignore</label>
                        <select multiple name="mediaTypes">
                            <option>Reddit image</option>
                            <option>Reddit video</option>
                            <option>Imgur image</option>
                        </select>
                    <input type="submit" class="btn btn-primary" value="submit">
                </form>
            </div>
            <div class="col-8" style="border:1px solid red">
                <!--HERE ARE Posts-->
                <form method="post" asp-page-handler="ChangeShowType">
                    <label for="showType">Display as</label>
                    <select name="showType">
                        @switch (Model.ShowType)
                        {
                            case SelectShowType.SUBREDDIT_EXPANDED:
                                <option value="1">Posts</option>
                                <option selected value="2">Subreddits expanded</option>
                                <option value="3">Subredits reduced</option>
                                break;
                            case SelectShowType.SUBREDDITS_REDUCED:
                                <option value="1">Posts</option>
                                <option value="2">Subreddits expanded</option>
                                <option selected value="3">Subredits reduced</option>
                                break;
                            default:
                                <option selected value="1">Posts</option>
                                <option value="2">Subreddits expanded</option>
                                <option value="3">Subredits reduced</option>
                                break;
                        }
                    </select>
                    <button type="submit">submit</button>
                        <i data-tippy-content="Changes the way the main list will be displayed. 1) Posts ordered by date. 2) Posts grouped by subreddit ordered alphabetically.(Posts still ordered by date) 3) Just Subreddits ordered alphabetically.">&#x1F6C8</i>
                </form>
                <form id="selectedPosts" method="post">
                    <ul class="p-2">
                        @switch(Model.ShowType){
                            case SelectShowType.SUBREDDIT_EXPANDED:
                                        <p>Subredits expanded.</p>
                                break;
                            case SelectShowType.SUBREDDITS_REDUCED:
                                        <p>Subredits reduced.</p>
                                break;
                            default:
                                @foreach (Post post in Model.Posts)
                                {
                                    string linkPost = "https://www.reddit.com" + post.PermaLink;
                                    string linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                                    string title = post.Title.Length > 57 ? post.Title.Substring(0, 57) + "..." : post.Title; //parameter max length
                                    <div>
                                        @if (Model.SelectedPosts != null)
                                        {
                                            bool selected = Model.SelectedPosts.Exists(e => e.Id == post.Id);
                                            if (selected)
                                            {
                                                <input name="@post.Id" post class="form-check-input" type="checkbox" checked>
                                            } else
                                            {
                                                <input name="@post.Id" post class="form-check-input" type="checkbox">    
                                            }

                                        }
                                        else
                                        {
                                            <input name="@post.Id" class="form-check-input" type="checkbox" checked>
                                        }
                                        @if (Model.DownloadedIds.Contains(post.Id))
                                        {
                                            <span>X - </span>
                                        }
                                        <a href="@linkSubreddit">@post.Subreddit</a> -
                                            @if (post.Over18)
                                            {
                                                <span>18+ - </span>
                                            }
                                        @post.Domain - @title - 
                                            <a href="@linkPost" target="_blank">link</a>
                                        </div>
                                }
                                break;
                        }
                    </ul>
                </form>
            </div>
            <div class="col-2" style="border:1px solid red">
                <!--HERE ARE Details-->
                Details:
                <div id="count"></div>
            </div>
        </div>
    </div>
    <script>
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        var count = document.querySelectorAll('input[type="checkbox"]:checked').length

        var countElement = document.getElementById('count');
        countElement.textContent = 'Checked: ' + count;

        for (var i = 0; i < checkboxes.length; i++) {
        checkboxes[i].addEventListener('change', function() {
            var count = document.querySelectorAll('input[type="checkbox"]:checked').length
            countElement.textContent = 'Checked: ' + count;
        });
        }
    </script>
}