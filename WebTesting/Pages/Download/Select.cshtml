@page
@using WebTesting.Entities;
@using WebTesting.Entities.Enums;
@using WebTesting.Models;
@model WebTesting.Pages.Download.SelectModel
@inject IHttpContextAccessor Accessor
@{

}

@if (Accessor.HttpContext.Session.GetString("UserName") == null)
{
        <div class="text-center">
            <p>You are not logged in.</p>
        </div>
}
else
{   
    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <h2>Select posts to download.</h2>
            </div>
            <div class="col" style="border:1px solid red">
                <!--HERE ARE PRESETS-->
                Templates:
                <select form="selectedPosts" id="templatesSelect" name="templatesSelect">
                    <option value="none">None</option>
                </select>
                <button onclick="newTemplate()">New</button>
                <button onclick="deleteTemplate()">Delete</button>
            </div>
            <div class="col-3 text-end"> 
                <a asp-page-handler="Refresh" class="btn btn-primary">Refresh posts</a>
                <input id="nextStep" form="selectedPosts" type="submit" class="btn btn-primary" asp-page="/Download/Structure" value="Next step">
            </div>
        </div>
        <div class="row">
            <div class="col-2" style="border:1px solid red">
                <!--HERE ARE Select settings-->
                <div class="row pb-2">
                    <label for="showDownloaded">Show downloaded posts:</label>
                    @if (Model.ShowDownloaded == true)
                    {
                        <input form="selectedPosts" name="showDownloaded" type="checkbox" checked>
                    }
                    else
                    {
                        <input form="selectedPosts" name="showDownloaded" type="checkbox">
                    }
                </div>
                <div class="row pb-2">  
                    <label for="groupBySubreddits">Group by subreddits:</label>
                    @if (Model.GroupBySubreddit == true)
                    {
                        <input form="selectedPosts" name="groupBySubreddits" type="checkbox" checked>
                    }
                    else
                    {
                        <input form="selectedPosts" name="groupBySubreddits" type="checkbox">
                    }
                </div>
                <div class="row pb-2">
                    <label for="nsfw">Nsfw/sfw:</label>
                    <select form="selectedPosts" name="nsfw">
                    @switch (Model.Nsfw)
                    {
                        case SelectNsfw.SFW:
                                <option value="both">Both</option>
                                <option selected value="sfw">SFW</option>
                                <option value="nsfw">NSFW</option>
                            break;
                        case SelectNsfw.NSFW:
                                <option value="both">Both</option>
                                <option value="sfw">SFW</option>
                                <option selected value="nsfw">NSFW</option>
                            break;
                        default:
                                <option selected value="both">Both</option>
                                <option value="sfw">SFW</option>
                                <option value="nsfw">NSFW</option>
                            break;
                    }
                    </select>
                </div>
                <div class="row pb-2 pt-3">
                    <div class="col-6 pl-0">
                        <label for="mediaTypes">Media to show:</label> 
                    </div>
                    <div class="col-3 pl-0">
                        <input type="button" name="Button" value="All" onclick="selectAll(true)" />
                    </div>
                    <div class="col-2 p-0">
                        <input type="button" name="Button" value="None" onclick="selectAll(false)" />
                    </div>
                    <select form="selectedPosts" id='multipleSelect' onclick="displayColorSelected()" data-placeholder='Begin typing a name to filter...' multiple class='chosen-select' name='multipleSelect[]'>
                    @foreach (string domain in Model.Domains)
                    {
                        if (Model.DomainsForm.Contains(domain)) {
                            <option selected>@domain</option>
                        } else { 
                            <option>@domain</option>
                        }
                    }
                    </select>
                </div>   
            </div>
            <div class="col-8" style="border:1px solid red">
                <!--HERE ARE Posts-->
                <input type="checkbox" name="selectAll" class="form-check-input" id="select-all-checkboxes" value="Select All">
                <i data-tippy-content="Changes the way the main list will be displayed. 1) Posts ordered by date. 2) Posts grouped by subreddit ordered alphabetically.(Posts still ordered by date) 3) Just Subreddits ordered alphabetically.">&#x1F6C8</i>
                <form id="selectedPosts" method="post" asp-page-handler="Select">
                    <ul id="postList" name="postList" class="p-2"></ul>
                </form>
            </div>
            <div class="col-2" style="border:1px solid red">
                <!--HERE ARE Details--> 
                <b>Details:</b>
                <div id="count"></div>
                <b>Domains:</b>
                <div id="domains"></div>
                <b>Nsfw/sfw:</b>
                <div id="nsfwDetail"></div>
                <div id="subreddits"></div>
                <div id="subredditsList"></div>
            </div>
        </div>
    </div>
    <input type="hidden" id="hdnSession" asp-for="PostsJson"/>
    <input type="hidden" id="downloadedIds" asp-for="DownloadedIdsJson"/>
    <input type="hidden" id="selectedIds" asp-for="SelectedIdsJson"/>
    <input type="hidden" id="templatesJson" asp-for="TemplatesJson"/>
    <input type="hidden" id="selectedTemplate" asp-for="SelectedTemplate"/>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.jquery.min.js"></script>
    <link href="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.min.css" rel="stylesheet"/>
    <script>
        var checkboxes = document.querySelectorAll('input[type="checkbox"][id="checkbox"]');
        const selectAllCheckboxes = document.getElementById("select-all-checkboxes");
        const submitButton = document.getElementById("the-submit");
        const test = document.getElementById("test");
        const print = document.getElementById("print");
        const sessionInput = document.getElementById("hdnSession");
        const multipleSelect = document.getElementById("multipleSelect");
        const nextStepButton = document.getElementById("nextStep");
        var filteredLength = 0;


        //Select Form
        const i_groupBySubreddits = document.getElementsByName('groupBySubreddits')[0];
        const i_showDownloaded = document.getElementsByName('showDownloaded')[0];
        const i_nsfw = document.getElementsByName('nsfw')[0];
        const i_multipleSelect= document.getElementsByName('multipleSelect')[0];
        const postList = document.getElementById("postList");
        var v_groupBySubreddits = false;
        if(i_groupBySubreddits.checked == 'true'){
            v_groupBySubreddits = true;
        }
        var v_showDownloaded = false;
        if(i_showDownloaded.checked == 'true'){
            v_showDownloaded = true;
        }
        var v_nsfw = i_nsfw.value;
        var v_multipleSelect = $("#multipleSelect").chosen().val();
        var v_downloadedIds = document.getElementById("downloadedIds").value;
        var downloadedIds = JSON.parse(v_downloadedIds);
        var v_selectedIds = document.getElementById("selectedIds").value;
        if(v_selectedIds != ''){
            var selectedIds = JSON.parse(v_selectedIds); 
        }

        //details
        var domainsList = document.getElementById("domains");
        var subredditsList = document.getElementById("subredditsList");
        var subredditsCount = document.getElementById("subreddits");
        var nsfwList = document.getElementById("nsfwDetail");
        var countAltText = document.getElementById("count");
        var count = 0;
        
        //Fetch List<Post> from server
        var value = sessionInput.value;
        var posts = JSON.parse(value);
        //alert('Start - post: ' + posts + "//// downloaded ids: " + downloadedIds);

        //Templates
        const i_selectedTemplate = document.getElementById("selectedTemplate"); //TODO remove useless i_ and so on
        var v_selectedTemplate = i_selectedTemplate.value;
        const i_templatesSelect = document.getElementById("templatesSelect");

        var templatesJson = document.getElementById("templatesJson").value;
        var templates = JSON.parse(templatesJson);
        for(let i = 0; i < templates.length; i++){
            let option = document.createElement('option');
            option.value = JSON.stringify(templates[i]);
            if(templates[i].Id == v_selectedTemplate){
                option.selected = true;
            }
            option.innerHTML = templates[i].Name;
            i_templatesSelect.appendChild(option);
        }
        var v_templatesSelect = i_templatesSelect.value;
        if(v_templatesSelect != 'none'){
            let template = JSON.parse(v_templatesSelect);
            v_showDownloaded = template.ShowDownloaded;
            i_showDownloaded.checked = v_showDownloaded;
            v_groupBySubreddits = template.GroupBySubreddit;
            i_groupBySubreddits.checked = v_groupBySubreddits;
            v_nsfw = template.Nsfw;
            i_nsfw.value = v_nsfw;
            v_multipleSelect = JSON.parse(template.DomainsForm);
            $("#multipleSelect").chosen().val(v_multipleSelect);
            $('#multipleSelect').val(v_multipleSelect).trigger('chosen:updated');
        }
        
        //Adding on change functions that will trigger redrawing the list
        i_groupBySubreddits.addEventListener('change', (event) => {
            if (event.currentTarget.checked) {
                v_groupBySubreddits = true;
            } else {
                v_groupBySubreddits = false;
            }
            redraw();
        });
        i_showDownloaded.addEventListener('change', (event) => {
            if (event.currentTarget.checked) {
                v_showDownloaded = true;
            } else {
                v_showDownloaded = false;
            }
            redraw();
        });
        i_nsfw.addEventListener('change', function() {
            v_nsfw = this.value;
            redraw();
        });
        i_templatesSelect.addEventListener('change', function() {
            v_templatesSelect = this.value;
            if(v_templatesSelect != 'none'){
                let template = JSON.parse(v_templatesSelect);
                v_showDownloaded = template.ShowDownloaded;
                i_showDownloaded.checked = v_showDownloaded;
                v_groupBySubreddits = template.GroupBySubreddit;
                i_groupBySubreddits.checked = v_groupBySubreddits;
                v_nsfw = template.Nsfw;
                i_nsfw.value = v_nsfw;
                v_multipleSelect = JSON.parse(template.DomainsForm);
                $("#multipleSelect").chosen().val(v_multipleSelect);
                $('#multipleSelect').val(v_multipleSelect).trigger('chosen:updated');
                redraw();
            }else{
                
            }
        });
        $('#multipleSelect').change(function(){
            values = $("#multipleSelect").chosen().val();
            v_multipleSelect = values;
            redraw();
        });

        //select deselect all
        selectAllCheckboxes.addEventListener('change', function() {
            checkboxes.forEach(function(checkbox) {
                checkbox.checked = selectAllCheckboxes.checked;
            });
            calculateDetails(true);
        });

        function selectAll(value) { 
            let multipleSelect = document.getElementById("multipleSelect");
            for (let i = 0; i < multipleSelect.options.length; i++) { 
                multipleSelect.options[i].selected = value; 
            } 
            $('#multipleSelect').trigger("chosen:updated");
            v_multipleSelect = $("#multipleSelect").chosen().val();
            redraw();
        }

        //Calculating details on the richt side of screen
        function calculateDetails(doCount){
            let counting = 0;
            let subreddits = {};
            var domains = {};
            let nsfw = {};
            checkboxes.forEach(function(checkbox) {
                if(checkbox.checked){
                    posts.forEach(function(post){
                        if(post.Id == checkbox.name){
                            counting++;
                            if(!domains[post.Domain]){
                                domains[post.Domain] = 0;
                            }
                            domains[post.Domain]++;
                            if(!nsfw[post.Over18]){
                                nsfw[post.Over18] = 0;
                            }
                            nsfw[post.Over18]++;
                            if(!subreddits[post.Subreddit]){
                                subreddits[post.Subreddit] = 0;
                            }
                            subreddits[post.Subreddit]++;
                        }
                    });
                }
            });

            //Disabling/Enabling next step button
            if(counting != 0){
                nextStepButton.disabled = false;
            }else{
                nextStepButton.disabled = true;
            }
            
            //generating html for details
            domainsList.innerHTML = "";
            let subKeysDomains = Object.keys(domains);
            let subValuesDomains = Object.values(domains);
            let dataDomains = [];
            for (let i = 0; i < subKeysDomains.length; i++) {
                dataDomains.push({
                    key: subKeysDomains[i],
                    value: subValuesDomains[i]
                });
            }
            dataDomains.sort((a,b) => b.value - a.value);
            for(let i = 0; i < dataDomains.length; i++){
                if(Object.values(domains)[i] != 'null'){
                    let li = document.createElement('div');
                    li.innerHTML = '&emsp;' + dataDomains[i].key + ' - ' + dataDomains[i].value + '<br>';
                    domainsList.appendChild(li);
                }    
            }
            nsfwList.innerHTML = "";
            for(let i = 0; i < Object.values(nsfw).length; i++){
                let li = document.createElement('div');
                let key = Object.keys(nsfw)[i];
                if(key == 'true'){
                    key = 'nsfw';
                }else{
                    key = 'sfw';
                }
                li.innerHTML = '&emsp;' + key + ' - ' + Object.values(nsfw)[i] + '<br>';
                nsfwList.appendChild(li);
            }
            subredditsList.innerHTML = "";
            let data = Object.entries(subreddits);
            data.sort((a,b) => b[1] - a[1]);
            for(let i = 0; i < data.length; i++){
                let li = document.createElement('div');
                li.innerHTML = '&emsp;' + data[i][0] + ' - ' + data[i][1] + '<br>';
                subredditsList.appendChild(li);
            }
            subredditsCount.innerHTML = '<b>Subreddits:</b> ' + Object.values(subreddits).length;

            countAltText.innerHTML = '<b>Count</b> - ' + counting;

            //Change checkbox selectAll to proper state
            if(counting == filteredLength){
                selectAllCheckboxes.checked = true;
                selectAllCheckboxes.indeterminate = false;
            }else if(counting == 0){
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = false;
            }else{
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = true;
            }
        }
        $(".chosen-select").chosen({
            no_results_text: "Oops, nothing found!"
        })

        redraw();
        function redraw(){

            postList.innerHTML = '';
            //posts draw
            let filteredPosts = posts;
            if(!v_showDownloaded == true){
                filteredPosts = filteredPosts.filter(post => !downloadedIds.includes(post.Id));
            }
            if(v_nsfw == 'nsfw'){
                filteredPosts = filteredPosts.filter(post => post.Over18);
            }else if(v_nsfw == 'sfw'){
                filteredPosts = filteredPosts.filter(post => !post.Over18);
            }
            filteredPosts = filteredPosts.filter(post => v_multipleSelect.includes(post.Domain));
            filteredLength = filteredPosts.length;
            if(filteredLength == 0){
                let postHtml = document.createElement('div');
                postHtml.innerHTML = "Oops no posts were found. It would seem that your filters are filtering one post too many.<br>(Check the 'Show downloaded posts' option.)"
                postList.appendChild(postHtml);
            }else{
                if(v_groupBySubreddits){
                    //Subredits
                    let subredditIndex = 0;
                    let filteredSubreddits = [];
                    for(let i = 0; i < filteredPosts.length; i++){
                        if(!filteredSubreddits.includes(filteredPosts[i].Subreddit)){
                            filteredSubreddits.push(filteredPosts[i].Subreddit);
                        }
                    }
                    filteredSubreddits.forEach(subreddit => {
                        let subredditFilteredPosts = filteredPosts.filter(post => post.Subreddit == subreddit);
                        let subredditHtml = document.createElement('div');
                        subredditHtml.id = 'M' + subredditIndex;
                        subredditHtml.innerHTML = "<input id='C" + subredditIndex + "' class='form-check-input' type='checkbox' checked><b>" + subreddit + "</b>";
                        //postList.appendChild(subredditHtml);
                        for(let i = 0; i < subredditFilteredPosts.length; i++){ //TODO zmenit na foreach
                            let post = subredditFilteredPosts[i]; //kvuli tomuhle
                            let postHtml = document.createElement('div');
                            let html = '';
                            let linkPost = "https://www.reddit.com" + post.PermaLink;
                            let linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                            let title = '';
                            if(post.Title.length > 57){
                                title = post.Title.slice(0,55);
                                title = title + "...";
                            }else{
                                title = post.Title;
                            }
                                html = "<div>&emsp;";
                            if(v_selectedIds != ''){
                                let selected = selectedIds.includes(post.Id);
                                if(selected){
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                }else{
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                                }
                            }else{
                                html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                            }
                    
                            let downloaded = downloadedIds.includes(post.Id);
                            if(downloaded){
                                html = html + "<span> X - </span>"
                            }
                            if(post.Over18){
                                html = html + "<span> 18+ - </span>"
                            }
                            html = html + "<a href='" + linkSubreddit + "' target='_blank'>" + post.Subreddit + "</a> - ";
                            html = html + post.Domain + " - " + title + " - <a href='" + linkPost + "' target='_blank'>link</a>";
                            postHtml.innerHTML = html;
                            subredditHtml.appendChild(postHtml);
                        }
                        postList.appendChild(subredditHtml);
                        addListener(subredditIndex);
                        subredditIndex++;
                    });
                }else{
                    for(let i = 0; i < filteredPosts.length; i++){ //TODO zmenit na foreach
                        let post = filteredPosts[i]; //kvuli tomuhle
                        let postHtml = document.createElement('div');
                        let html = '';
                        let linkPost = "https://www.reddit.com" + post.PermaLink;
                        let linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                        let title = '';
                        if(post.Title.length > 57){
                            title = post.Title.slice(0,55);
                            title = title + "...";
                        }else{
                            title = post.Title;
                        }
                            html = "<div>";
                        if(v_selectedIds != ''){
                            let selected = selectedIds.includes(post.Id);
                            if(selected){
                                html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                            }else{
                                html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                            }
                        }else{
                            html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                        }
                    
                        let downloaded = downloadedIds.includes(post.Id);
                        if(downloaded){
                            html = html + "<span> X - </span>"
                        }
                        if(post.Over18){
                            html = html + "<span> 18+ - </span>"
                        }
                        html = html + "<a href='" + linkSubreddit + "' target='_blank'>" + post.Subreddit + "</a> -";
                        html = html + post.Domain + " - " + title + " - <a href='" + linkPost + "' target='_blank'>link</a></div>";
                        postHtml.innerHTML = html;
                        postList.appendChild(postHtml);
                    }
                }
            }
            v_selectedIds = '';
            linkCheckBoxes();
            calculateDetails(true);
            //alert('End of redraw');
        }
        function linkCheckBoxes(){
            checkboxes = document.querySelectorAll('input[type="checkbox"][id="checkbox"]');
            checkboxes.forEach(function(checkbox) {
                checkbox.addEventListener("change", function() {
                    calculateDetails(true);
                });
            });
        }
        function newTemplate(){
            var person = prompt("Please enter unique name for your Template:", "");
            if (person != null && person != "") {
                $.ajax({
                    url: '/Download/Select?handler=NewTemplate',
                    type: 'GET',
                    data: { name: person, show: v_showDownloaded, group: v_groupBySubreddits, domains: JSON.stringify(v_multipleSelect), nsfw: v_nsfw },
                    dataType: 'json',
                    success: function (data) {
                        let template = JSON.parse(data);
                        let option = document.createElement('option');
                        option.value = JSON.stringify(template);
                        option.innerHTML = template.Name;
                        i_templatesSelect.appendChild(option);
                        i_templatesSelect.value = data;
                    },
                    error: function (xhr, status, error) {
                        alert('Error - Template could not be created. Ensure that your name is unique.'); // handle any errors here
                    }
                });
            }
        }
        function deleteTemplate(){
            let tempVal1 = i_templatesSelect.value;
            if(tempVal1 != "none"){
                let tempVal = i_templatesSelect.value;
                let template = JSON.parse(tempVal);
                //let confirm = confirm("Do you truly want to delete Template '" + template.name + "':");
                if (true) {
                    $.ajax({
                        url: '/Download/Select?handler=DeleteTemplate',
                        type: 'GET',
                        data: { id: template.Id },
                        dataType: 'json',
                        success: function (data) {
                            var options = i_templatesSelect.getElementsByTagName('OPTION');
                            for(let i=0; i< options.length; i++) {
                                if(options[i].innerHTML == template.Name) {
                                    i_templatesSelect.removeChild(options[i]);
                                    break;
                                }
                            }
                            i_templates.value = "none";
                        },
                        error: function (xhr, status, error) {
                            alert('Error - Template could not be deleted.'); // handle any errors here
                        }
                    });
                }
            }
        }
        function addListener(id){
            //alert("adding listeners");
            let main = document.getElementById('C' + id);
            let children = document.getElementById('M' + id).querySelectorAll('#checkbox');
            //alert('main - ' + main + '    children ' + children);
            main.addEventListener('change', function() {
                alert('Main ' + id + '    ' + children.length);
                for(let i = 0; i < children.length; i++){
                    alert('foreach ' + children[i].checked);
                    children[i].checked = main.checked;
                }
                calculateDetails(true);
            });
        }
    </script>
}