@page
@using WebTesting.Entities;
@using WebTesting.Entities.Enums;
@model WebTesting.Pages.Download.SelectModel
@inject IHttpContextAccessor Accessor
@{

}

@if (Accessor.HttpContext.Session.GetString("UserName") == null)
{
        <div class="text-center">
            <p>You are not logged in.</p>
        </div>
}
else
{   
    <input type="hidden" id="hdnSession" asp-for="PostsJson"/>
    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <h2>Select posts to download.</h2>
            </div>
            <div class="col" style="border:1px solid red">
                <!--HERE ARE PRESETS-->
                Presets:
                <select asp>
                    <option>Preset 1</option>
                    <option>Preset 2</option>
                </select>
                <button>New</button>
                <button>Delete</button>
            </div>
            <div class="col-3 text-end">
                <a asp-page-handler="Refresh" class="btn btn-primary">Refresh posts</a>
                <input form="selectedPosts" type="submit" class="btn btn-primary" asp-page="/Download/Structure" value="Next step">
            </div>
        </div>
        <div class="row">
            <div class="col-2" style="border:1px solid red">
                    <!--HERE ARE Select settings-->
                    <div class="row pb-2">
                        <label for="showDownloaded">Show downloaded posts:</label>
                        @if (Model.ShowDownloaded == true)
                        {
                            <input form="selectedPosts" name="showDownloaded" type="checkbox" checked>
                        }
                        else
                        {
                            <input form="selectedPosts" name="showDownloaded" type="checkbox">
                        }
                    </div>
                    <div class="row pb-2">
                        <label for="nsfw">Nsfw/sfw:</label>
                        <select form="selectedPosts" name="nsfw">
                        @switch (Model.Nsfw)
                        {
                            case SelectNsfw.SFW:
                                    <option value="both">Both</option>
                                    <option selected value="sfw">SFW</option>
                                    <option value="nsfw">NSFW</option>
                                break;
                            case SelectNsfw.NSFW:
                                    <option value="both">Both</option>
                                    <option value="sfw">SFW</option>
                                    <option selected value="nsfw">NSFW</option>
                                break;
                            default:
                                    <option selected value="both">Both</option>
                                    <option value="sfw">SFW</option>
                                    <option value="nsfw">NSFW</option>
                                break;
                        }
                        </select>
                    </div>
                    <div class="row pb-2">
                        <label for="mediaTypes">Media to show</label> 
                        <select form="selectedPosts" id='multipleSelect' data-placeholder='Begin typing a name to filter...' multiple class='chosen-select' name='multipleSelect[]'>
                        @foreach (string domain in Model.Domains)
                        {
                            if (Model.SelectedDomains.Contains(domain)) {
                                <option selected>@domain</option>
                            } else { 
                                <option>@domain</option>
                            }
                        }
                        </select>
                    </div>
                    <div class="row">
                        <input form="selectedPosts" type="submit" class="btn btn-primary" value="Submit">
                    </div>           
            </div>
            <div class="col-8" style="border:1px solid red">
                <!--HERE ARE Posts-->
                    <input type="checkbox" name="selectAll" class="form-check-input" id="select-all-checkboxes" value="Select All">
                <!--<form method="post" asp-page-handler="ChangeShowType">
                    <label for="showType">Display as</label>
                    <select name="showType">
                @{
                    /*
    switch (Model.ShowType)
    {
        case SelectShowType.SUBREDDIT_EXPANDED:
                <option value="1">Posts</option>
                <option selected value="2">Subreddits expanded</option>
                <option value="3">Subredits reduced</option>
                break;
        case SelectShowType.SUBREDDITS_REDUCED:
                <option value="1">Posts</option>
                <option value="2">Subreddits expanded</option>
                <option selected value="3">Subredits reduced</option>
                break;
        default:
                <option selected value="1">Posts</option>
                <option value="2">Subreddits expanded</option>
                <option value="3">Subredits reduced</option>
                break;
    }
    */
                    int a = 5;
                }
                    </select>
                    <button type="submit">submit</button>
                    <input form="selectedPosts" type="submit" class="btn btn-primary" asp-asp-page-handler="ChangeShowType" value="Submit">
                    <i data-tippy-content="Changes the way the main list will be displayed. 1) Posts ordered by date. 2) Posts grouped by subreddit ordered alphabetically.(Posts still ordered by date) 3) Just Subreddits ordered alphabetically.">&#x1F6C8</i>
                    </form>-->
                <form id="selectedPosts" method="post" asp-page-handler="Select">
                    <ul class="p-2">
                        @{
                            /*switch(Model.ShowType){
                            case SelectShowType.SUBREDDIT_EXPANDED:
                                        <p>Subredits expanded.</p>
                                break;
                            case SelectShowType.SUBREDDITS_REDUCED:
                                        <p>Subredits reduced.</p>
                                break;
                            default:*/
                                @foreach (Post post in Model.Posts)
                                {
                                    string linkPost = "https://www.reddit.com" + post.PermaLink;
                                    string linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                                    string title = post.Title.Length > 57 ? post.Title.Substring(0, 57) + "..." : post.Title; //parameter max length
                                    <div>
                                        @if (Model.SelectedPosts != null)
                                        {
                                            bool selected = Model.SelectedPosts.Exists(e => e.Id == post.Id);
                                            if (selected)
                                            {
                                                <input name="@post.Id" post id="checkbox" class="form-check-input" type="checkbox" checked>
                                            } else
                                            {
                                                <input name="@post.Id" post id="checkbox" class="form-check-input" type="checkbox">    
                                            }

                                        }
                                        else
                                        {
                                            <input name="@post.Id" id="checkbox" class="form-check-input" type="checkbox" checked>
                                        }
                                        @if (Model.DownloadedIds.Contains(post.Id))
                                        {
                                            <span>X - </span>
                                        }
                                        <a href="@linkSubreddit">@post.Subreddit</a> -
                                            @if (post.Over18)
                                            {
                                                <span>18+ - </span>
                                            }
                                        @post.Domain - @title - 
                                            <a href="@linkPost" target="_blank">link</a>
                                        </div>
                                }
                                //break;
                        //} 
                        }
                    </ul>
                </form>
            </div>
            <div class="col-2" style="border:1px solid red">
                <!--HERE ARE Details--> 
                Details:
                <div id="count"></div>
                Domains:
                <ul id="domains"></ul>
                Nsfw/sfw:
                <ul id="nsfwDetail"></ul>
                <div id="subreddits"></div>
                <div id="subredditsList"></div>
            </div>
        </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.jquery.min.js"></script>
    <link href="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.min.css" rel="stylesheet"/>
    <script>
        var checkboxes = document.querySelectorAll('input[type="checkbox"][id="checkbox"]');
        const selectAllCheckboxes = document.getElementById("select-all-checkboxes");
        const submitButton = document.getElementById("the-submit");
        const test = document.getElementById("test");
        const print = document.getElementById("print");
        const sessionInput = document.getElementById("hdnSession");
        const multipleSelect = document.getElementById("multipleSelect");
        

        //details
        var domainsList = document.getElementById("domains");
        var subredditsList = document.getElementById("subredditsList");
        var subredditsCount = document.getElementById("subreddits");
        var nsfwList = document.getElementById("nsfwDetail");
        var countAltText = document.getElementById("count");
        var count = 0;
        
        //Fetch List<Post> from server
        var value = sessionInput.value;
        var posts = JSON.parse(value);

        //Calculate details of selected posts
        calculateDetails(true);
        checkboxes.forEach(function(checkbox) {
            checkbox.addEventListener("change", function() {
                calculateDetails(true);
            });
        });


        //select deselect all
        selectAllCheckboxes.addEventListener('change', function() {
            checkboxes.forEach(function(checkbox) {
                checkbox.checked = selectAllCheckboxes.checked;
            });
            calculateDetails(true);
          });

        //Calculating details on the richt side of screen
        function calculateDetails(doCount){
            let counting = 0;
            let subreddits = {};
            var domains = {};
            let nsfw = {};
            checkboxes.forEach(function(checkbox) {
                if(checkbox.checked){
                    posts.forEach(function(post){
                        if(post.Id == checkbox.name){
                            counting++;
                            if(!domains[post.Domain]){
                                domains[post.Domain] = 0;
                            }
                            domains[post.Domain]++;
                            if(!nsfw[post.Over18]){
                                nsfw[post.Over18] = 0;
                            }
                            nsfw[post.Over18]++;
                            if(!subreddits[post.Subreddit]){
                                subreddits[post.Subreddit] = 0;
                            }
                            subreddits[post.Subreddit]++;
                        }
                    });
                }
            });
            
            //generating html for details
            domainsList.innerHTML = "";
            let subKeysDomains = Object.keys(domains);
            let subValuesDomains = Object.values(domains);
            let dataDomains = [];
            for (let i = 0; i < subKeysDomains.length; i++) {
                dataDomains.push({
                    key: subKeysDomains[i],
                    value: subValuesDomains[i]
                });
            }
            dataDomains.sort((a,b) => b.value - a.value);
            for(let i = 0; i < dataDomains.length; i++){
                if(Object.values(domains)[i] != 'null'){
                    let li = document.createElement('li');
                    li.innerText = dataDomains[i].key + ' - ' + dataDomains[i].value;
                    domainsList.appendChild(li);
                }    
            }
            nsfwList.innerHTML = "";
            for(let i = 0; i < Object.values(nsfw).length; i++){
                let li = document.createElement('li');
                let key = Object.keys(nsfw)[i];
                if(key == 'true'){
                    key = 'nsfw';
                }else{
                    key = 'sfw';
                }
                li.innerText = key + ' - ' + Object.values(nsfw)[i];
                nsfwList.appendChild(li);
            }
            subredditsList.innerHTML = "";
            let subKeys = Object.keys(subreddits);
            let subValues = Object.values(subreddits);
            let data = [];
            for (let i = 0; i < subKeys.length; i++) {
                data.push({
                    key: subKeys[i],
                    value: subValues[i]
                });
            }
            data.sort((a,b) => b.value - a.value);
            for(let i = 0; i < data.length; i++){
                let li = document.createElement('li');
                li.innerText = data[i].key + ' - ' + data[i].value;
                subredditsList.appendChild(li);
            }
            subredditsCount.textContent = 'Subreddits: ' + Object.values(subreddits).length;

            countAltText.textContent = 'Count - ' + counting;

            //Change checkbox selectAll to proper state
            if(counting == posts.length){
                selectAllCheckboxes.checked = true;
                selectAllCheckboxes.indeterminate = false;
            }else if(counting == 0){
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = false;
            }else{
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = true;
            }
        }
        $(".chosen-select").chosen({
            no_results_text: "Oops, nothing found!"
        })
    </script>
}