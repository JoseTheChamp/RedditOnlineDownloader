@page
@using WebTesting.Entities;
@using WebTesting.Entities.Enums;
@using WebTesting.Models;
@model WebTesting.Pages.Download.SelectModel
@inject IHttpContextAccessor Accessor
@{
    ViewData["Title"] = "Select";
}

@if (Accessor.HttpContext.Session.GetString("UserName") == null)
{
        <div class="text-center">
            <p>You are not logged in.</p>
        </div>
}
else
{   
    <div class="container-fluid">
        <div class="row">
            <div class="col-5 my-auto">
                <h2 style="color:#009670">Select posts to download</h2>
            </div>
            <div class="col my-auto">
            <!--HERE ARE Templates-->
                Templates:
                <select form="selectedPosts" id="templatesSelect" name="templatesSelect">
                    <option value="none">None</option>
                </select>
                <button onclick="newTemplate()">New</button>
                <button onclick="deleteTemplate()">Delete</button>
                <i data-tippy-content="Templates can keep your used setting for later ease of use. They save while advancing to the next step or while creating the template.">&#x1F6C8</i>
            </div>
            <div class="col-3 text-end my-auto"> 
                <a asp-page-handler="Refresh" class="btn btn-primary">Refresh posts</a>
                <input id="nextStep" form="selectedPosts" type="submit" class="btn btn-primary" asp-page="/Download/Structure" value="Next step">
            </div>
        </div>
        <div class="row">
            <div class="col-2">
            <hr class="solid">
            <!--HERE ARE Select settings-->
                <div class="row pb-2">
                    <h4 style="color:#009670">Filters:</h4>
                    <label for="showDownloaded">Show downloaded posts:<i data-tippy-content="If checked then the already downloaded posts will be visible (Dowloaded posts are marked with X).">&#x1F6C8</i></label>
                    @if (Model.ShowDownloaded == true)
                    {
                        <input form="selectedPosts" name="showDownloaded" type="checkbox" checked>
                    }
                    else
                    {
                        <input form="selectedPosts" name="showDownloaded" type="checkbox">
                    }
                </div>
                <div class="row pb-2">  
                    <label for="groupBySubreddits">Group by subreddits:<i data-tippy-content="If checked then posts will be grouped by their subreddit. Possible to select subreddits to download.">&#x1F6C8</i></label>
                    @if (Model.GroupBySubreddit == true)
                    {
                        <input form="selectedPosts" name="groupBySubreddits" type="checkbox" checked>
                    }
                    else
                    {
                        <input form="selectedPosts" name="groupBySubreddits" type="checkbox">
                    }
                </div>
                    <div class="row pb-2">
                        <div class="col-11">
                            <label for="nsfw">Nsfw/sfw:<i data-tippy-content="Both - All posts will be visible. NSFW - Only posts that are marked 18+ will be visible. SFW - Only posts that are not marked 18+ will be visible.">&#x1F6C8</i></label>
                        </div>
                        <div class="col-11">
                            <select form="selectedPosts" name="nsfw">
                            @switch (Model.Nsfw)
                            {
                                case SelectNsfw.SFW:
                                            <option value="both">Both</option>
                                            <option selected value="sfw">SFW</option>
                                            <option value="nsfw">NSFW</option>
                                    break;
                                case SelectNsfw.NSFW:
                                            <option value="both">Both</option>
                                            <option value="sfw">SFW</option>
                                            <option selected value="nsfw">NSFW</option>
                                    break;
                                default:
                                            <option selected value="both">Both</option>
                                            <option value="sfw">SFW</option>
                                            <option value="nsfw">NSFW</option>
                                    break;
                            }
                            </select>
                        </div>
                </div>
                <div class="row pb-2 pt-3">
                    <div class="col-5 pl-0">
                        <label for="mediaTypes">Media to show:<i data-tippy-content="Select the domains which you want to see. IMAGES: i.redd.it - reddit image, reddit.com - image gallery post, i.imgur.com - image hosted on imgur, VIDEOS: v.redd.it - reddit video, gfycat.com - video hosted on gfycat.com, TEXT: text - reddit text post, comment - saved reddit comment, link - saved reddit link.">&#x1F6C8</i></label> 
                    </div>
                    <div class="col-3 pl-0">
                        <input type="button" name="Button" value="All" onclick="selectAll(true)" />
                    </div>
                    <div class="col-2 p-0">
                        <input type="button" name="Button" value="None" onclick="selectAll(false)" />
                    </div>
                    <select form="selectedPosts" id='multipleSelect' onclick="displayColorSelected()" data-placeholder='Begin typing a name to filter...' multiple class='chosen-select' name='multipleSelect[]'>
                    @foreach (string domain in Model.Domains)
                    {
                        if (Model.DomainsForm.Contains(domain)) {
                            <option selected>@domain</option>
                        } else { 
                            <option>@domain</option>
                        }
                    }
                    </select>
                </div>
                <hr class="solid">
                <p style="font-size:14px">
                    <b style="font-size:16px;color:#009670">Implemented domains:</b><br>
                    <b>i.redd.it</b> - reddit image<br>
                    <b>v.redd.it</b> - reddit video<br>
                    <b>text</b> - reddit text post<br>
                    <b>link</b> - reddit link post<br>
                    <b>comment</b> - reddit comment<br>
                    <b>i.imgur.com</b> - imgur image<br>
                    <b>gfycat.com</b> - gfycat video<br>
                    <b>not_supported</b> - all other domains, saved as a text post
                </p>
                <span style="font-size:13px"><b style="color:red">!</b>Note that videos take a long time to download. (95% of time usage)<b style="color:red">!</b></span>
            </div>
            <div class="col-7" style="border:3px solid #009670">
            <!--HERE ARE Posts-->
                <input type="checkbox" name="selectAll" class="form-check-input" id="select-all-checkboxes" value="Select All">
                <i data-tippy-content="Selects or deselects all posts.">&#x1F6C8</i>
                <form id="selectedPosts" method="post" asp-page-handler="Select">
                    <ul id="postList" name="postList" class="p-2"></ul>
                </form>
            </div>
            <div class="col-3">
            <!--HERE ARE Details-->
                <hr class="solid">
                <h4 style="color:#009670">Details:</h4>
                <div id="count"></div>
                <span><b style="color:#009670">Domains:</b><i data-tippy-content="Supported domains => IMAGES: i.redd.it - reddit image, reddit.com - image gallery post, i.imgur.com - image hosted on imgur, VIDEOS: v.redd.it - reddit video, gfycat.com - video hosted on gfycat.com, TEXT: text - reddit text post, comment - saved reddit comment, link - saved reddit link.">&#x1F6C8</i></span>
                <div id="domains"></div>
                <span><b style="color:#009670">Nsfw/sfw:</b><i data-tippy-content="NSFW - Posts that are marked 18+. SFW - Posts that are not marked 18+.">&#x1F6C8</i></span>
                <div id="nsfwDetail"></div>
                <div id="subreddits"></div>
                <div id="subredditsList"></div>
            </div>
        </div>
    </div>
    <input type="hidden" id="hdnSession" asp-for="PostsJson"/>
    <input type="hidden" id="downloadedIds" asp-for="DownloadedIdsJson"/>
    <input type="hidden" id="selectedIds" asp-for="SelectedIdsJson"/>
    <input type="hidden" id="templatesJson" asp-for="TemplatesJson"/>
    <input type="hidden" id="selectedTemplate" asp-for="SelectedTemplate"/>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.jquery.min.js"></script>
    <link href="https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.min.css" rel="stylesheet"/>
    <script>
        //Defining constants
        var checkboxes = document.querySelectorAll('input[type="checkbox"][id="checkbox"]');
        const selectAllCheckboxes = document.getElementById("select-all-checkboxes");
        const sessionInput = document.getElementById("hdnSession");
        const multipleSelect = document.getElementById("multipleSelect");
        const nextStepButton = document.getElementById("nextStep");
        var filteredLength = 0;

        //Getting downloaded and selected ids from hidden fields
        var v_downloadedIds = document.getElementById("downloadedIds").value;
        var downloadedIds = JSON.parse(v_downloadedIds);
        var v_selectedIds = document.getElementById("selectedIds").value;
        if(v_selectedIds != ''){
            var selectedIds = JSON.parse(v_selectedIds); 
        }


        //Select Form
        const i_groupBySubreddits = document.getElementsByName('groupBySubreddits')[0];
        const i_showDownloaded = document.getElementsByName('showDownloaded')[0];
        const i_nsfw = document.getElementsByName('nsfw')[0];
        const i_multipleSelect= document.getElementsByName('multipleSelect')[0];
        const postList = document.getElementById("postList");
        var v_groupBySubreddits = i_groupBySubreddits.checked;
        var v_showDownloaded = i_showDownloaded.checked;
        var v_nsfw = i_nsfw.value;
        var v_multipleSelect = $("#multipleSelect").chosen().val();

        //details
        var domainsList = document.getElementById("domains");
        var subredditsList = document.getElementById("subredditsList");
        var subredditsCount = document.getElementById("subreddits");
        var nsfwList = document.getElementById("nsfwDetail");
        var countText = document.getElementById("count");
        var count = 0;
        
        //Parsing List<Post> from hidden field
        var value = sessionInput.value;
        var posts = JSON.parse(value);

        //Templates
        const i_selectedTemplate = document.getElementById("selectedTemplate");
        var v_selectedTemplate = i_selectedTemplate.value;
        const i_templatesSelect = document.getElementById("templatesSelect");

        var templatesJson = document.getElementById("templatesJson").value;
        var templates = JSON.parse(templatesJson);
        for(let i = 0; i < templates.length; i++){
            let option = document.createElement('option');
            option.value = JSON.stringify(templates[i]);
            if(templates[i].Id == v_selectedTemplate){
                option.selected = true;
            }
            option.innerHTML = templates[i].Name;
            i_templatesSelect.appendChild(option);
        }
        var v_templatesSelect = i_templatesSelect.value;
        if(v_templatesSelect != 'none'){
            let template = JSON.parse(v_templatesSelect);
            v_showDownloaded = template.ShowDownloaded;
            i_showDownloaded.checked = v_showDownloaded;
            v_groupBySubreddits = template.GroupBySubreddit;
            i_groupBySubreddits.checked = v_groupBySubreddits;
            v_nsfw = template.Nsfw;
            i_nsfw.value = v_nsfw;
            v_multipleSelect = JSON.parse(template.DomainsForm);
            $('#multipleSelect').val(v_multipleSelect).trigger('chosen:updated');
        }
        
        //Adding on change functions that will trigger redrawing the list
        i_groupBySubreddits.addEventListener('change', (event) => {
            if (event.currentTarget.checked) {
                v_groupBySubreddits = true;
            } else {
                v_groupBySubreddits = false;
            }
            redraw();
        });
        i_showDownloaded.addEventListener('change', (event) => {
            if (event.currentTarget.checked) {
                v_showDownloaded = true;
            } else {
                v_showDownloaded = false;
            }
            redraw();
        });
        i_nsfw.addEventListener('change', function() {
            v_nsfw = this.value;
            redraw();
        });
        i_templatesSelect.addEventListener('change', function() {
            v_templatesSelect = this.value;
            if(v_templatesSelect != 'none'){
                let template = JSON.parse(v_templatesSelect);
                v_showDownloaded = template.ShowDownloaded;
                i_showDownloaded.checked = v_showDownloaded;
                v_groupBySubreddits = template.GroupBySubreddit;
                i_groupBySubreddits.checked = v_groupBySubreddits;
                v_nsfw = template.Nsfw;
                i_nsfw.value = v_nsfw;
                v_multipleSelect = JSON.parse(template.DomainsForm);
                $('#multipleSelect').val(v_multipleSelect).trigger('chosen:updated');
                redraw();
            }else{
                
            }
        });
        $('#multipleSelect').change(function(){
            values = $("#multipleSelect").chosen().val();
            v_multipleSelect = values;
            redraw();
        });

        //Code for select/deselect all
        selectAllCheckboxes.addEventListener('change', function() {
            checkboxes.forEach(function(checkbox) {
                checkbox.checked = selectAllCheckboxes.checked;
            });
            checkboxes.forEach(function(checkbox) {
                let evt = document.createEvent("HTMLEvents");
                evt.initEvent("change", false, true);
                checkbox.dispatchEvent(evt);
            });
            calculateDetails(true);
        });
        function selectAll(value) { 
            let multipleSelect = document.getElementById("multipleSelect");
            for (let i = 0; i < multipleSelect.options.length; i++) { 
                multipleSelect.options[i].selected = value; 
            } 
            v_multipleSelect = $("#multipleSelect").chosen().val();
            //$("#multipleSelect").chosen().val(v_multipleSelect);
            $('#multipleSelect').val(v_multipleSelect).trigger('chosen:updated');
            redraw();
        }

        //Calculating details on the right side of screen
        function calculateDetails(doCount){
            let counting = 0;
            let subreddits = {};
            var domains = {};
            let nsfw = {};
            checkboxes.forEach(function(checkbox) {
                if(checkbox.checked){
                    posts.forEach(function(post){
                        if(post.Id == checkbox.name){
                            counting++;
                            if(!domains[post.Domain]){
                                domains[post.Domain] = 0;
                            }
                            domains[post.Domain]++;
                            if(!nsfw[post.Over18]){
                                nsfw[post.Over18] = 0;
                            }
                            nsfw[post.Over18]++;
                            if(!subreddits[post.Subreddit]){
                                subreddits[post.Subreddit] = 0;
                            }
                            subreddits[post.Subreddit]++;
                        }
                    });
                }
            });

            //Disabling/Enabling next step button
            if(counting != 0){
                nextStepButton.disabled = false;
            }else{
                nextStepButton.disabled = true;
            }
            
            //generating html for details
            domainsList.innerHTML = "";
            let dataDom = Object.entries(domains);
            dataDom.sort((a,b) => b[1] - a[1]);
            for(let i = 0; i < dataDom.length; i++){
                let li = document.createElement('div');
                li.innerHTML = '&emsp;' + dataDom[i][0] + ' - ' + dataDom[i][1] + '<br>';
                domainsList.appendChild(li);
            }
            nsfwList.innerHTML = "";
            for(let i = 0; i < Object.values(nsfw).length; i++){
                let li = document.createElement('div');
                let key = Object.keys(nsfw)[i];
                if(key == 'true'){
                    key = 'nsfw';
                }else{
                    key = 'sfw';
                }
                li.innerHTML = '&emsp;' + key + ' - ' + Object.values(nsfw)[i] + '<br>';
                nsfwList.appendChild(li);
            }
            subredditsList.innerHTML = "";
            let data = Object.entries(subreddits);
            data.sort((a,b) => b[1] - a[1]);
            for(let i = 0; i < data.length; i++){
                let li = document.createElement('div');
                li.innerHTML = '&emsp;' + data[i][0] + ' - ' + data[i][1] + '<br>';
                subredditsList.appendChild(li);
            }
            subredditsCount.innerHTML = '<b style="color:#009670">Subreddits:</b> ' + Object.values(subreddits).length;
            countText.innerHTML = '<b style="color:#009670">Count - </b>' + counting;

            //Change checkbox selectAll to proper state
            if(counting == filteredLength){
                selectAllCheckboxes.checked = true;
                selectAllCheckboxes.indeterminate = false;
            }else if(counting == 0){
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = false;
            }else{
                selectAllCheckboxes.checked = false;
                selectAllCheckboxes.indeterminate = true;
            }
        }

        //Required setting for chosen-multipleSelect
        $(".chosen-select").chosen({
            no_results_text: "Oops, nothing found!"
        })

        redraw();

        //Function that redraws list of posts.
        function redraw(){
            //Go through all checkBoxes and save their names - ids
            let jsSelectedIds = [];
            checkboxes.forEach(function(checkbox) {
                if(checkbox.checked == true){
                    jsSelectedIds.push(checkbox.getAttribute("name"));
                }
            });

            postList.innerHTML = '';

            //Filtering posts
            let filteredPosts = posts;
            if(!v_showDownloaded == true){
                filteredPosts = filteredPosts.filter(post => !downloadedIds.includes(post.Id));
            }
            if(v_nsfw == 'nsfw'){
                filteredPosts = filteredPosts.filter(post => post.Over18);
            }else if(v_nsfw == 'sfw'){
                filteredPosts = filteredPosts.filter(post => !post.Over18);
            }
            if(v_multipleSelect == null){
                filteredPosts = [];
            }else{
                filteredPosts = filteredPosts.filter(post => v_multipleSelect.includes(post.Domain));
            }
            filteredLength = filteredPosts.length;

            //Createing html for the list of posts
            if(filteredLength == 0){
                let postHtml = document.createElement('div');
                postHtml.innerHTML = "Oops no posts were found. It would seem that your filters are filtering one post too many.<br>(Check the 'Show downloaded posts' option.)"
                postList.appendChild(postHtml);
            }else{
                if(v_groupBySubreddits){
                    //Subredits
                    let subredditIndex = 0;
                    let filteredSubreddits = [];
                    for(let i = 0; i < filteredPosts.length; i++){
                        if(!filteredSubreddits.includes(filteredPosts[i].Subreddit)){
                            filteredSubreddits.push(filteredPosts[i].Subreddit);
                        }
                    }
                    filteredSubreddits.forEach(subreddit => {
                        let subredditFilteredPosts = filteredPosts.filter(post => post.Subreddit == subreddit);
                        let subredditHtml = document.createElement('div');
                        subredditHtml.id = 'M' + subredditIndex;
                        subredditHtml.innerHTML = "<input id='C" + subredditIndex + "' class='form-check-input' type='checkbox' checked><b id='no'>" + subreddit + "</b><button type='button' id='I" + subredditIndex + "' onclick='showOrHide(" + subredditIndex + ")'>&#8595;</button>";
                        subredditFilteredPosts.forEach((post) => {
                            let postHtml = document.createElement('div');
                                let html = '&emsp;';
                            let linkPost = "https://www.reddit.com" + post.PermaLink;
                            let linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                            let title = '';
                            if(post.Title.length > 57){
                                title = post.Title.slice(0,55);
                                title = title + "...";
                            }else{
                                title = post.Title;
                            }
                            if(v_selectedIds != ''){
                                let selected = selectedIds.includes(post.Id);
                                if(selected){
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                }else{
                                    if(jsSelectedIds.includes(post.Id)){
                                        html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                    }else{
                                        html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                                    }
                                }
                            }else{
                                if(jsSelectedIds != ''){
                                    if(jsSelectedIds.includes(post.Id)){
                                        html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                    }else{
                                        html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                                    }
                                }else{
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                }
                            }
                            let downloaded = downloadedIds.includes(post.Id);
                            if(downloaded){
                                html = html + "<span> X - </span>"
                            }
                            if(post.Over18){
                                html = html + "<span> 18+ - </span>"
                            }
                            html = html + "<a href='" + linkSubreddit + "' target='_blank'>" + post.Subreddit + "</a> - ";
                            html = html + post.Domain + " - " + title + " - <a href='" + linkPost + "' target='_blank'>link</a>";
                            postHtml.innerHTML = html;
                            subredditHtml.appendChild(postHtml);
                        });
                        postList.appendChild(subredditHtml);
                        addListener(subredditIndex);
                        subredditIndex++;
                    });
                }else{
                    //List of posts - no subreddits
                        filteredPosts.forEach((post) => {
                        let postHtml = document.createElement('div');
                        let html = '';
                        let linkPost = "https://www.reddit.com" + post.PermaLink;
                        let linkSubreddit = "https://www.reddit.com/" + post.Subreddit;
                        let title = '';
                        if(post.Title.length > 57){
                            title = post.Title.slice(0,55);
                            title = title + "...";
                        }else{
                            title = post.Title;
                        }
                        html = "<div>";
                        if(v_selectedIds != ''){
                            let selected = selectedIds.includes(post.Id);
                            if(selected){
                                html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                            }else{
                                if(jsSelectedIds.includes(post.Id)){
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                }else{
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                                }
                            }
                        }else{
                            if(jsSelectedIds != ''){
                                if(jsSelectedIds.includes(post.Id)){
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                                }else{
                                    html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox'> ";
                                }
                            }else{
                                html = html + "<input name='" + post.Id + "' post id='checkbox' class='form-check-input' type='checkbox' checked> ";
                            }
                        }
                        let downloaded = downloadedIds.includes(post.Id);
                        if(downloaded){
                            html = html + "<span> X - </span>"
                        }
                        if(post.Over18){
                            html = html + "<span> 18+ - </span>"
                        }
                        html = html + "<a href='" + linkSubreddit + "' target='_blank'>" + post.Subreddit + "</a> -";
                        html = html + post.Domain + " - " + title + " - <a href='" + linkPost + "' target='_blank'>link</a></div>";
                        postHtml.innerHTML = html;
                        postList.appendChild(postHtml);
                    });
                }
            }
            v_selectedIds = '';
            linkCheckBoxes();
            calculateDetails(true);
        }

        //Link newly generated checkboxes with calculate details function + refresh variable checkboxes
        function linkCheckBoxes(){
            checkboxes = document.querySelectorAll('input[type="checkbox"][id="checkbox"]');
            checkboxes.forEach(function(checkbox) {
                checkbox.addEventListener("change", function() {
                    calculateDetails(true);
                });
            });
        }

        function newTemplate(){
            var title = prompt("Please enter unique name for your Template:", "");
            if(title.length > 128){
                alert("Name of the Template was too long. (Maximum length is 128 characters.)");
                return;
            }
            if (title != null && title != "") {
                $.ajax({
                    url: '/Download/Select?handler=NewTemplate',
                    type: 'GET',
                    data: { name: title, show: v_showDownloaded, group: v_groupBySubreddits, domains: JSON.stringify(v_multipleSelect), nsfw: v_nsfw },
                    dataType: 'json',
                    success: function (data) {
                        let template = JSON.parse(data);
                        let option = document.createElement('option');
                        option.value = JSON.stringify(template);
                        option.innerHTML = template.Name;
                        i_templatesSelect.appendChild(option);
                        i_templatesSelect.value = data;
                    },
                    error: function (xhr, status, error) {
                        alert('Error - Template could not be created. Ensure that your name is unique.'); // handle any errors here
                    }
                });
            }
        }

        function deleteTemplate(){
            if(i_templatesSelect.value != "none"){
                let template = JSON.parse(i_templatesSelect.value);
                if (confirm("Do you truly want to delete Template '" + template.Name + "':") == true) {
                    $.ajax({
                        url: '/Download/Select?handler=DeleteTemplate',
                        type: 'GET',
                        data: { id: template.Id },
                        dataType: 'json',
                        success: function (data) {
                            var options = i_templatesSelect.getElementsByTagName('OPTION');
                            for(let i=0; i< options.length; i++) {
                                if(options[i].innerHTML == template.Name) {
                                    i_templatesSelect.removeChild(options[i]);
                                    break;
                                }
                            }
                            i_templates.value = "none";
                        },
                        error: function (xhr, status, error) {
                            alert('Error - Template could not be deleted.');
                        }
                    });
                }
            }
        }

        //Add listeners to subbredits so that they respond to checking of the user
        function addListener(id){
            let main = document.getElementById('C' + id);
            let children = document.getElementById('M' + id).querySelectorAll('#checkbox');
            main.addEventListener('change', function() {
                for(let i = 0; i < children.length; i++){
                    children[i].checked = main.checked;
                }
                calculateDetails(true);
            });
            children.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    let subCount = 0;
                    children.forEach(function(check) {
                        if(check.checked){
                            subCount++;
                        }
                    });
                    if(subCount == children.length){
                        main.checked = true;
                        main.indeterminate = false;
                    }else if(subCount == 0){
                        main.checked = false;
                        main.indeterminate = false;
                    }else{
                        main.checked = false;
                        main.indeterminate = true;
                    }
                });
            });
            let evt = document.createEvent("HTMLEvents");
            evt.initEvent("change", false, true);
            children[0].dispatchEvent(evt);
        }

        //add functionality to hide/show button at subreddits
        function showOrHide(id) 
        {
            let ids = ['M' + id,'I' + id, 'C' + id, "no"];
            let children = document.getElementById('M' + id).children;
            let image = document.getElementById('I' + id);
            if (image.innerText == '↓') 
            {
                image.innerHTML = '&#8593;';
                for(let i = 0; i < children.length; i++){
                    if(!ids.includes(children[i].id)){
                        children[i].style.display = 'none';
                    }
                }
            }
            else 
            {
                image.innerHTML = '&#8595;';
                for(let i = 0; i < children.length; i++){
                    if(!ids.includes(children[i].id)){
                        children[i].style.display = 'block';
                    }
                }
            }
        }
    </script>
}